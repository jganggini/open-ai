volumes:
  openwebui-data:
  ollama-data:
  postgres-data:
  airflow-dags:
  airflow-logs:

# ──────────────────────────────────────────────────────────────────────────────
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  build: ./airflow
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://${AIRFLOW_POSTGRES_USER}:${AIRFLOW_POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${AIRFLOW_POSTGRES_DB}'
    AIRFLOW__CELERY__RESULT_BACKEND: 'db+postgresql://${AIRFLOW_POSTGRES_USER}:${AIRFLOW_POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${AIRFLOW_POSTGRES_DB}'
    AIRFLOW__CELERY__BROKER_URL: 'redis://:@redis:6379/0'
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    # New Conections
    AIRFLOW_CONN_OPENWEBUI_POSTGRES: 'postgresql+psycopg2://${OPENWEBUI_POSTGRES_USER}:${OPENWEBUI_POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${OPENWEBUI_POSTGRES_DB}'
    # yamllint disable rule:line-length
    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # The following line can be used to set a custom config file, stored in the local config folder
    # If you want to use it, outcomment it and replace airflow.cfg with the name of your config file
    # AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
  env_file:
    - .env
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - airflow-logs:/opt/airflow/logs
    - ./.env:/opt/airflow/data/.env:ro
    - ./airflow/data/wallet:/opt/airflow/data/wallet
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
    postgres-airflow:
      condition: service_completed_successfully

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama-data:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  container_name: ollama-pull-llama
  volumes:
    - ollama-data:/root/.ollama
  entrypoint: /bin/sh
  environment:
    - OLLAMA_HOST=ollama:11434
  command: >
    -c "
      sleep 3 &&
      ollama pull nomic-embed-text &&
      ollama pull llama3.2-vision:11b &&
      ollama pull deepseek-r1:7b
    "

services:
  
  # ──────────────────────────────────────────────────────────────────────────────
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    restart: always
  
  # ──────────────────────────────────────────────────────────────────────────────
  redis:
    # Redis is limited to 7.2-bookworm due to licencing change
    # https://redis.io/blog/redis-adopts-dual-source-available-licensing/
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

  # ──────────────────────────────────────────────────────────────────────────────
  postgres-openwebui:
    image: postgres:15
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: >
      bash -c "
        until pg_isready -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER}; do 
          echo 'Esperando a que PostgreSQL esté listo...'; sleep 2; 
        done;
        echo 'PostgreSQL disponible. Configurando OpenWebUI...';
        psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -tc \"SELECT 1 FROM pg_roles WHERE rolname='${OPENWEBUI_POSTGRES_USER}'\" | grep -q 1 || \
          psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -c \"CREATE USER ${OPENWEBUI_POSTGRES_USER} WITH PASSWORD '${OPENWEBUI_POSTGRES_PASSWORD}'\";
        psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -tc \"SELECT 1 FROM pg_database WHERE datname='${OPENWEBUI_POSTGRES_DB}'\" | grep -q 1 || \
          psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -c \"CREATE DATABASE ${OPENWEBUI_POSTGRES_DB} OWNER ${OPENWEBUI_POSTGRES_USER}\"; 
      "
    environment:
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      OPENWEBUI_POSTGRES_DB: "${OPENWEBUI_POSTGRES_DB}"
      OPENWEBUI_POSTGRES_USER: "${OPENWEBUI_POSTGRES_USER}"
      OPENWEBUI_POSTGRES_PASSWORD: "${OPENWEBUI_POSTGRES_PASSWORD}"
      PGPASSWORD: "${POSTGRES_PASSWORD}"
    restart: "no"

  openwebui:
    container_name: openwebui
    image: ghcr.io/open-webui/open-webui:main
    depends_on:
      postgres:
        condition: service_healthy
      postgres-openwebui:
        condition: service_completed_successfully
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      HOST: 0.0.0.0
      PORT: 3000
      DATABASE_URL: "postgresql://${OPENWEBUI_POSTGRES_USER}:${OPENWEBUI_POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${OPENWEBUI_POSTGRES_DB}"
    volumes:
      - openwebui-data:/data

  # ──────────────────────────────────────────────────────────────────────────────

  nginx:
    build: ./nginx
    depends_on:
      openwebui:
        condition: service_completed_successfully
    ports:
      - "80:80"
      - "443:443"
    restart: unless-stopped

  # ──────────────────────────────────────────────────────────────────────────────

  postgres-airflow:
    image: postgres:15
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: >
      bash -c "
        until pg_isready -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -U ${POSTGRES_USER}; do 
          echo 'Esperando a que PostgreSQL esté listo...'; sleep 2; 
        done;
        echo 'PostgreSQL disponible. Configurando Airflow...';
        psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -tc \"SELECT 1 FROM pg_roles WHERE rolname='${AIRFLOW_POSTGRES_USER}'\" | grep -q 1 || \
          psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -c \"CREATE USER ${AIRFLOW_POSTGRES_USER} WITH PASSWORD '${AIRFLOW_POSTGRES_PASSWORD}'\";
        psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -tc \"SELECT 1 FROM pg_database WHERE datname='${AIRFLOW_POSTGRES_DB}'\" | grep -q 1 || \
          psql -h ${POSTGRES_HOST} -U ${POSTGRES_USER} -c \"CREATE DATABASE ${AIRFLOW_POSTGRES_DB} OWNER ${AIRFLOW_POSTGRES_USER}\"; 
      "
    environment:
      POSTGRES_HOST: "${POSTGRES_HOST}"
      POSTGRES_PORT: "${POSTGRES_PORT}"
      AIRFLOW_POSTGRES_DB: "${AIRFLOW_POSTGRES_DB}"
      AIRFLOW_POSTGRES_USER: "${AIRFLOW_POSTGRES_USER}"
      AIRFLOW_POSTGRES_PASSWORD: "${AIRFLOW_POSTGRES_PASSWORD}"
      PGPASSWORD: "${POSTGRES_PASSWORD}"
    restart: "no"

  # ──────────────────────────────────────────────────────────────────────────────

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    container_name: airflow-worker
    command: celery worker
    healthcheck:
      # yamllint disable rule:line-length
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

# ──────────────────────────────────────────────────────────────────────────────
  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: ["gpu"]

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *init-ollama
    image: ollama/ollama:rocm